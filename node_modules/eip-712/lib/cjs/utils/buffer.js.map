{"version":3,"sources":["../../../src/utils/buffer.ts"],"names":["keccak256","data","encoding","update","digest","toBuffer","startsWith","Buffer","from","substring"],"mappings":";;;;;;;AAAA;;;;AAUO,MAAMA,SAAS,GAAG,CAACC,IAAD,EAAwBC,QAAxB,KAA8D;AACrF,SAAO,qBAAiB,WAAjB,EAA8BC,MAA9B,CAAqCF,IAArC,EAA2CC,QAA3C,EAAqDE,MAArD,EAAP;AACD,CAFM;;;;AAWA,MAAMC,QAAQ,GAAG,CAACJ,IAAD,EAAeC,QAAf,KAAqD;AAC3E,MAAI,CAACA,QAAL,EAAe;AACb,QAAID,IAAI,CAACK,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACzB,aAAOC,MAAM,CAACC,IAAP,CAAYP,IAAI,CAACQ,SAAL,CAAe,CAAf,CAAZ,EAA+B,KAA/B,CAAP;AACD;;AAED,WAAOF,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkB,KAAlB,CAAP;AACD;;AAED,SAAOM,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBC,QAAlB,CAAP;AACD,CAVM","sourcesContent":["import createKeccakHash from 'keccak';\n\n/**\n * Hashes the data with the optional encoding specified. If no encoding is specified, it is assumed that the data is\n * already a Buffer.\n *\n * @param {string | Buffer} data\n * @param {BufferEncoding} [encoding]\n * @return {Buffer}\n */\nexport const keccak256 = (data: string | Buffer, encoding?: BufferEncoding): Buffer => {\n  return createKeccakHash('keccak256').update(data, encoding).digest();\n};\n\n/**\n * Get a string as Buffer, with the optional encoding specified. If no encoding is specified, it is assumed that the\n * data is a hexadecimal string. The string can optionally contain the 0x prefix.\n *\n * @param {string} data\n * @param {BufferEncoding} encoding\n */\nexport const toBuffer = (data: string, encoding?: BufferEncoding): Buffer => {\n  if (!encoding) {\n    if (data.startsWith('0x')) {\n      return Buffer.from(data.substring(2), 'hex');\n    }\n\n    return Buffer.from(data, 'hex');\n  }\n\n  return Buffer.from(data, encoding);\n};\n"],"file":"buffer.js"}