import { getIdentifier } from './identifier';
import { pack, unpack } from './parsers/array';
import { concat } from './utils/buffer';
export const encode = (input, values) => {
  const types = input.map(type => {
    if (typeof type === 'string') {
      return type;
    }

    return type.type;
  });
  return pack(Buffer.alloc(0), values, types);
};
export const encodeWithIdentifier = (contractFunction, values) => {
  const identifier = Buffer.from(getIdentifier(contractFunction), 'hex');
  const encoded = encode(contractFunction.inputs, values);
  return concat(identifier, encoded);
};
export const decode = (input, buffer) => {
  const types = input.map(type => {
    if (typeof type === 'string') {
      return type;
    }

    return type.type;
  });
  return unpack(buffer, types);
};
//# sourceMappingURL=abi.js.map