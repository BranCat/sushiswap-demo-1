{"version":3,"sources":["../../../src/parsers/bytes.ts"],"names":["addPadding","concat","toBuffer","toNumber","encodeBytes","buffer","value","bufferValue","paddedSize","Math","ceil","byteLength","Buffer","decodeBytes","pointer","Number","subarray","length"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,QAAvC,QAAuD,iBAAvD;AAGA,OAAO,MAAMC,WAA2B,GAAG,CAACC,MAAD,EAAqBC,KAArB,KAAgE;AACzG,QAAMC,WAAW,GAAGL,QAAQ,CAACI,KAAD,CAA5B;AACA,QAAME,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUH,WAAW,CAACI,UAAZ,GAAyB,EAAnC,IAAyC,EAA5D;AAEA,SAAOV,MAAM,CAACI,MAAD,EAASO,MAAM,CAACX,MAAP,CAAc,CAACC,QAAQ,CAACK,WAAW,CAACI,UAAb,CAAT,EAAmCX,UAAU,CAACO,WAAD,EAAcC,UAAd,CAA7C,CAAd,CAAT,CAAb;AACD,CALM;AAQP,OAAO,MAAMK,WAA2B,GAAG,CAACP,KAAD,EAAoBD,MAApB,KAAuD;AAChG,QAAMS,OAAO,GAAGC,MAAM,CAACZ,QAAQ,CAACG,KAAK,CAACU,QAAN,CAAe,CAAf,EAAkB,EAAlB,CAAD,CAAT,CAAtB;AACA,QAAMC,MAAM,GAAGd,QAAQ,CAACG,KAAK,CAACU,QAAN,CAAeF,OAAf,EAAwBA,OAAO,GAAG,EAAlC,CAAD,CAAvB;AAEA,SAAOT,MAAM,CAACW,QAAP,CAAgB,EAAhB,EAAoB,KAAKD,MAAM,CAACE,MAAD,CAA/B,CAAP;AACD,CALM","sourcesContent":["import { addPadding, concat, toBuffer, toNumber } from '../utils/buffer';\nimport { DecodeFunction, EncodeFunction } from './parser';\n\nexport const encodeBytes: EncodeFunction = (buffer: Uint8Array, value: string | Uint8Array): Uint8Array => {\n  const bufferValue = toBuffer(value);\n  const paddedSize = Math.ceil(bufferValue.byteLength / 32) * 32;\n\n  return concat(buffer, Buffer.concat([toBuffer(bufferValue.byteLength), addPadding(bufferValue, paddedSize)]));\n};\n\n// TODO: This may not work properly yet\nexport const decodeBytes: DecodeFunction = (value: Uint8Array, buffer: Uint8Array): Uint8Array => {\n  const pointer = Number(toNumber(value.subarray(0, 32)));\n  const length = toNumber(value.subarray(pointer, pointer + 32));\n\n  return buffer.subarray(32, 32 + Number(length));\n};\n"],"file":"bytes.js"}