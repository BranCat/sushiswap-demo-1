import { addPadding, concat, toBuffer } from '../utils/buffer';
const BYTES_REGEX = /^bytes([0-9]{1,2})$/;
export const isFixedBytes = type => {
  return BYTES_REGEX.test(type);
};
export const getByteLength = type => {
  var _type$match;

  const bytes = (_type$match = type.match(BYTES_REGEX)) === null || _type$match === void 0 ? void 0 : _type$match[1];

  if (bytes) {
    const length = Number(bytes);

    if (length <= 0 || length > 32) {
      throw new Error('Invalid type: length is out of range');
    }

    return length;
  }

  throw new Error('Invalid type: no length');
};
export const encodeFixedBytes = (buffer, value, type) => {
  const length = getByteLength(type);
  const bufferValue = toBuffer(value);

  if (bufferValue.length > length) {
    throw new Error(`Buffer is too long, expected ${length}, got ${bufferValue.length}`);
  }

  return concat(buffer, addPadding(bufferValue));
};
export const decodeFixedBytes = (value, _, type) => {
  const length = getByteLength(type);
  return value.subarray(0, length);
};
//# sourceMappingURL=fixed-bytes.js.map