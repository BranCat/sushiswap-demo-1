{"version":3,"sources":["../../src/identifier.ts"],"names":["isTuple","input","type","parseType","components","map","getIdentifier","contractFunction","types","inputs","join","name","slice"],"mappings":";;;;;;;AACA;;AAEA,MAAMA,OAAO,GAAIC,KAAD,IAAuD;AACrE,SAAOA,KAAK,CAACC,IAAN,KAAe,OAAtB;AACD,CAFD;;AAUO,MAAMC,SAAS,GAAIF,KAAD,IAAkC;AACzD,MAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB,WAAQ,IAAGA,KAAK,CAACG,UAAN,CAAiBC,GAAjB,CAAqBF,SAArB,CAAgC,GAA3C;AACD;;AAED,SAAOF,KAAK,CAACC,IAAb;AACD,CANM;;;;AAcA,MAAMI,aAAa,GAAIC,gBAAD,IAAgD;AAC3E,QAAMC,KAAK,GAAGD,gBAAgB,CAACE,MAAjB,CAAwBJ,GAAxB,CAA4BF,SAA5B,EAAuCO,IAAvC,CAA4C,GAA5C,CAAd;AAEA,SAAO,uBAAW,GAAEH,gBAAgB,CAACI,IAAK,IAAGH,KAAM,GAA5C,EAAgDI,KAAhD,CAAsD,CAAtD,EAAyD,CAAzD,CAAP;AACD,CAJM","sourcesContent":["import { ContractFunction, ContractInput, ContractInputTuple } from './contract';\nimport { keccak256 } from './utils/keccak256';\n\nconst isTuple = (input: ContractInput): input is ContractInputTuple => {\n  return input.type === 'tuple';\n};\n\n/**\n * Parse the type of a contract input to a `string`.\n *\n * @param {ContractInput} input\n * @return {string}\n */\nexport const parseType = (input: ContractInput): string => {\n  if (isTuple(input)) {\n    return `(${input.components.map(parseType)})`;\n  }\n\n  return input.type;\n};\n\n/**\n * Get the function identifier of a contract function as `string`.\n *\n * @param {ContractFunction} contractFunction\n * @return {string}\n */\nexport const getIdentifier = (contractFunction: ContractFunction): string => {\n  const types = contractFunction.inputs.map(parseType).join(',');\n\n  return keccak256(`${contractFunction.name}(${types})`).slice(0, 8);\n};\n"],"file":"identifier.js"}