"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeFixedBytes = exports.encodeFixedBytes = exports.getByteLength = exports.isFixedBytes = void 0;

var _buffer = require("../utils/buffer");

const BYTES_REGEX = /^bytes([0-9]{1,2})$/;

const isFixedBytes = type => {
  return BYTES_REGEX.test(type);
};

exports.isFixedBytes = isFixedBytes;

const getByteLength = type => {
  var _type$match;

  const bytes = (_type$match = type.match(BYTES_REGEX)) === null || _type$match === void 0 ? void 0 : _type$match[1];

  if (bytes) {
    const length = Number(bytes);

    if (length <= 0 || length > 32) {
      throw new Error('Invalid type: length is out of range');
    }

    return length;
  }

  throw new Error('Invalid type: no length');
};

exports.getByteLength = getByteLength;

const encodeFixedBytes = (buffer, value, type) => {
  const length = getByteLength(type);
  const bufferValue = (0, _buffer.toBuffer)(value);

  if (bufferValue.length > length) {
    throw new Error(`Buffer is too long, expected ${length}, got ${bufferValue.length}`);
  }

  return (0, _buffer.concat)(buffer, (0, _buffer.addPadding)(bufferValue));
};

exports.encodeFixedBytes = encodeFixedBytes;

const decodeFixedBytes = (value, _, type) => {
  const length = getByteLength(type);
  return value.subarray(0, length);
};

exports.decodeFixedBytes = decodeFixedBytes;
//# sourceMappingURL=fixed-bytes.js.map