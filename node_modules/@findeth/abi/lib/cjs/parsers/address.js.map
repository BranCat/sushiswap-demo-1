{"version":3,"sources":["../../../src/parsers/address.ts"],"names":["encodeAddress","buffer","value","length","Error","addressBuffer","Buffer","alloc","write","substring","decodeAddress","subarray"],"mappings":";;;;;;;AAAA;;AAGO,MAAMA,aAA6B,GAAG,CAACC,MAAD,EAAqBC,KAArB,KAAmD;AAC9F,MAAIA,KAAK,CAACC,MAAN,KAAiB,EAArB,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,QAAMC,aAAa,GAAGC,MAAM,CAACC,KAAP,CAAa,EAAb,CAAtB;AACAF,EAAAA,aAAa,CAACG,KAAd,CAAoBN,KAAK,CAACO,SAAN,CAAgB,CAAhB,CAApB,EAAwC,EAAxC,EAA4C,KAA5C;AAEA,SAAO,oBAAOR,MAAP,EAAeI,aAAf,CAAP;AACD,CATM;;;;AAWA,MAAMK,aAA6B,GAAIR,KAAD,IAA+B;AAC1E,QAAMG,aAAa,GAAGH,KAAK,CAACS,QAAN,CAAe,CAAC,EAAhB,CAAtB;AACA,SAAQ,KAAI,mBAAMN,aAAN,CAAqB,EAAjC;AACD,CAHM","sourcesContent":["import { concat, toHex } from '../utils/buffer';\nimport { DecodeFunction, EncodeFunction } from './parser';\n\nexport const encodeAddress: EncodeFunction = (buffer: Uint8Array, value: string): Uint8Array => {\n  if (value.length !== 42) {\n    throw new Error('Invalid address length');\n  }\n\n  const addressBuffer = Buffer.alloc(32);\n  addressBuffer.write(value.substring(2), 12, 'hex');\n\n  return concat(buffer, addressBuffer);\n};\n\nexport const decodeAddress: DecodeFunction = (value: Uint8Array): string => {\n  const addressBuffer = value.subarray(-20);\n  return `0x${toHex(addressBuffer)}`;\n};\n"],"file":"address.js"}