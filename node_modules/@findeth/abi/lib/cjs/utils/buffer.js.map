{"version":3,"sources":["../../../src/utils/buffer.ts"],"names":["BUFFER_WIDTH","concat","target","value","position","Uint8Array","subarray","length","concatMultiple","buffers","reduce","buffer","array","set","addPadding","padding","Buffer","alloc","Math","max","toBuffer","isBuffer","stringValue","startsWith","substring","from","hex","toString","padStart","slice","window","TextDecoder","decode","require","toNumber","toHex","BigInt","numberToHex","Array","map","join"],"mappings":"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","sourcesContent":["const BUFFER_WIDTH = 32;\n\n/**\n * Concatenate two buffers. If a position is specified, `value` will be put in `target` at the specified position. All\n * bytes after that will be moved to the end of the buffer.\n *\n * @param {Uint8Array} target\n * @param {Uint8Array} value\n * @param {number} [position]\n * @return {Uint8Array}\n */\nexport const concat = (target: Uint8Array, value: Uint8Array, position?: number): Uint8Array => {\n  return new Uint8Array([\n    ...target.subarray(0, position ?? target.length),\n    ...value,\n    ...target.subarray(position ?? target.length)\n  ]);\n};\n\n/**\n * Concatenates multiple buffers, compatible with Uint8Arrays of browsers.\n *\n * @param {Uint8Array[]} buffers\n * @return {Uint8Array}\n */\nexport const concatMultiple = (buffers: Uint8Array[]): Uint8Array => {\n  return buffers.reduce((target, buffer) => {\n    const array = new Uint8Array(target.length + buffer.length);\n    array.set(target, 0);\n    array.set(buffer, target.length);\n    return array;\n  }, new Uint8Array(0));\n};\n\n/**\n * Add padding to a buffer. If the buffer is larger than `length`, this function won't do anything. If it's smaller, the\n * buffer will be padded to the specified length, with extra zeroes at the end.\n *\n * @param {Uint8Array} buffer\n * @param {number} [length]\n * @return {Uint8Array}\n */\nexport const addPadding = (buffer: Uint8Array, length = 32): Uint8Array => {\n  const padding = Buffer.alloc(Math.max(length - buffer.length, 0), 0);\n  return concat(buffer, padding);\n};\n\n/**\n * Get a value as buffer. The value can be a string, number, bigint or buffer. If the value is a string, it is assumed\n * that it is a hexadecimal value.\n *\n * @param {string | number | bigint | Uint8Array} value\n * @return {Uint8Array}\n */\nexport const toBuffer = (value: string | number | bigint | Uint8Array): Uint8Array => {\n  if (Buffer.isBuffer(value) || value instanceof Uint8Array) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const stringValue = value.startsWith('0x') ? value.substring(2) : value;\n    return Buffer.from(stringValue, 'hex');\n  }\n\n  const hex = value.toString(16);\n  return Buffer.from(hex.padStart(BUFFER_WIDTH * 2, '0').slice(0, BUFFER_WIDTH * 2), 'hex');\n};\n\n/**\n * Get a UTF-8 encodes buffer as string.\n *\n * @param {Uint8Array} value\n * @return {string}\n */\nexport const toString = (value: Uint8Array): string => {\n  if (typeof window !== 'undefined' && window.TextDecoder) {\n    return new TextDecoder('utf-8').decode(value);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  return new (require('util').TextDecoder)('utf-8').decode(value);\n};\n\n/**\n * Get a number from a buffer.\n *\n * @param {Uint8Array} buffer\n */\nexport const toNumber = (buffer: Uint8Array): bigint => {\n  const hex = toHex(buffer);\n  if (hex.length === 0) {\n    return BigInt(0);\n  }\n\n  return BigInt(`0x${hex}`);\n};\n\nconst numberToHex = (value: number): string => {\n  return ('0' + value.toString(16)).slice(-2);\n};\n\n/**\n * Get a buffer as hexadecimal string.\n *\n * @param {Uint8Array} buffer\n * @return {string}\n */\nexport const toHex = (buffer: Uint8Array): string => {\n  return Array.from(buffer).map(numberToHex).join('');\n};\n"],"file":"buffer.js"}